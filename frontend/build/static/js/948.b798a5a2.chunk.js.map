{"version":3,"file":"static/js/948.b798a5a2.chunk.js","mappings":"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","sources":["Pages/CreateOrder/CreateOrder.js"],"sourcesContent":["import { filter, uniqueId } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport SaveButton from \"../../Components/Buttons/SaveButton\";\nimport CheckboxList from \"../../Components/CheckboxList/CheckboxList\";\nimport UploadImages from \"../../Components/ImageCrop/UploadImages\";\nimport Description from \"../../Components/Inputs/Description\";\nimport Input from \"../../Components/Inputs/Input\";\nimport MinMaxPrice from \"../../Components/MinMaxPrice/MinMaxPrice\";\nimport UniversalModal from \"../../Components/Modal/UniversalModal\";\nimport RadioButtonList from \"../../Components/RadioButtons/RadioButtonList\";\nimport SelectCategory from \"../../Components/Select/SelectCategory\";\nimport SelectRegion from \"../../Components/Select/SelectRegion\";\nimport { universalToast } from \"../../Components/ToastMessages/ToastMessages\";\nimport { currencices } from \"../../Config/globalConstants\";\nimport {\n  clearSubcategories,\n  getAllCategories,\n  getSubcategories,\n} from \"../Category/categorySlice\";\nimport Filter from \"../Filter/Filter\";\nimport {\n  clearFilters,\n  filterCategories,\n  filterSubcategories,\n  filterSubcategories2,\n} from \"../Filter/filterSlice\";\nimport { getAllregions } from \"../Filter/regionsSlice\";\nimport { checkRegisterOrder } from \"../User/Orders/constants\";\nimport {\n  createOrder,\n  getOrderById,\n  updateOrder,\n} from \"../User/Orders/orderSlice\";\n\nconst CreateOrder = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const orderId = location?.state?.orderId;\n  const { tradetypes } = useSelector((state) => state.trade);\n  const { loading } = useSelector((state) => state.login);\n  const { regions } = useSelector((state) => state.regions);\n  const { categoriesWithSubcategories } = useSelector(\n    (state) => state.categories\n  );\n  const {\n    categories: categoriesList,\n    subcategories: subcategoriesList,\n    subcategories2: subcategoriesList2,\n  } = useSelector((state) => state.filter);\n\n  const [isVisibleFilter, setIsVisibleFilter] = useState(false);\n\n  const [tradeTypes, setTradeTypes] = useState([]);\n  const [region, setRegion] = useState(\"\");\n  const [district, setDistrict] = useState(\"\");\n  const [categories, setCategories] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [statuses, setStatuses] = useState([]);\n  const [currency, setCurrency] = useState(\"UZS\");\n  const [districts, setDistricts] = useState([]);\n  const [images, setImages] = useState([]);\n  const [minPrice, setMinPrice] = useState(\"\");\n  const [maxPrice, setMaxPrice] = useState(\"\");\n  const [errors, setErrors] = useState(null);\n\n  const clearErrors = () => {\n    setErrors(null);\n  };\n\n  const changeHandler = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    name === \"name\" && setName(value);\n    name === \"description\" && setDescription(value);\n    name === \"minPrice\" && setMinPrice(value);\n    name === \"maxPrice\" && setMaxPrice(value);\n    clearErrors();\n  };\n\n  const selectRegion = (e) => {\n    clearErrors();\n\n    setRegion(e);\n    setDistricts(e.districts);\n  };\n\n  const selectDistrict = (e) => {\n    clearErrors();\n    setDistrict(e);\n  };\n\n  const changeTradeTypes = (e) => {\n    clearErrors();\n    const value = e.target.value;\n    const checked = e.target.checked;\n    const filtered = filter(tradeTypes, (tradeType) => tradeType !== value);\n    checked\n      ? setTradeTypes([...filtered, value])\n      : setTradeTypes([...filtered]);\n  };\n\n  const selectCategory = (e) => {\n    const value = e.value;\n\n    clearErrors();\n    setCategories(e);\n    // dispatch(filterSubcategories([]));\n    // dispatch(filterSubcategories2([]));\n    dispatch(filterCategories([value]));\n    // dispatch(getSubcategories({ category: value }));\n  };\n\n  const changeCurrency = (e) => {\n    setCurrency(e.target.value);\n    clearErrors();\n  };\n\n  const enterHandler = (e) => {\n    clearErrors();\n    e.key === \"Enter\" && submitHandler();\n  };\n\n  const submitHandler = () => {\n    clearErrors();\n    const data = {\n      name,\n      description: description,\n      tradetypes: tradeTypes,\n      region: region.value,\n      district: district.value,\n      categories: categories.map((el) => el.value),\n\n      status: statuses,\n      currency,\n      images,\n      minPrice: Number(minPrice),\n      maxPrice: Number(maxPrice),\n    };\n    const check = checkRegisterOrder({ ...data, setErrors });\n    check &&\n      dispatch(\n        orderId\n          ? updateOrder({ id: orderId, ...data })\n          : createOrder({ ...data })\n      ).then(({ error }) => {\n        if (!error) {\n          universalToast(\"Заказ успешно создан!\", \"success\");\n          navigate(\"/profile/orders\");\n          dispatch(clearFilters());\n        }\n      });\n  };\n\n  const setDatas = (product) => {\n    const {\n      tradetypes,\n      region,\n      district,\n      categories,\n      subcategories,\n      subcategories2,\n      status,\n      currency,\n      images,\n      minPrice,\n      maxPrice,\n      name,\n      description,\n    } = product;\n\n    const { districts } = region;\n    name && setName(name);\n    description && setDescription(description);\n    tradetypes && setTradeTypes(tradetypes);\n    region.label && setRegion(region);\n    district.label && setDistrict(district);\n    districts.length && setDistricts(districts);\n    categories && setCategories(categories);\n    status && setStatuses(status);\n    currency && setCurrency(currency);\n    images && setImages(images);\n    minPrice && setMinPrice(minPrice);\n    maxPrice && setMaxPrice(maxPrice);\n    categories && dispatch(filterCategories([categories[0].value]));\n    // subcategories.length > 0 &&\n    //   dispatch(filterSubcategories([...subcategories.map((el) => el.value)]));\n    // subcategories2.length > 0 &&\n    //   dispatch(filterSubcategories2([...subcategories2.map((el) => el.value)]));\n    // dispatch(getSubcategories({ category: categories[0].value }));\n  };\n  useEffect(() => {\n    orderId &&\n      dispatch(getOrderById({ id: orderId })).then(({ payload, error }) => {\n        if (error) {\n          UniversalModal(error.message, \"error\");\n        } else {\n          const { order } = payload;\n          setDatas(payload);\n        }\n      });\n    return () => {\n      // dispatch(filterSubcategories([]));\n      // dispatch(filterSubcategories2([]));\n      dispatch(filterCategories([]));\n      dispatch(clearSubcategories());\n    };\n  }, [dispatch, orderId]);\n\n  useEffect(() => {\n    dispatch(getAllCategories());\n    dispatch(getAllregions());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className='py-6'>\n        {isVisibleFilter && (\n          <div\n            className='fixed top-0 left-0 w-full h-full z-[100] bg-black bg-opacity-50 '\n            onClick={() => setIsVisibleFilter(false)}\n          >\n            <Filter\n              onClick={() => setIsVisibleFilter(false)}\n              setFilterVisible={() => setIsVisibleFilter(false)}\n              filterVisible={isVisibleFilter}\n            />\n          </div>\n        )}\n        <div className='container max-w-[800px]'>\n          <div className='text-[28px] text-alotrade font-bold mb-3 text-center'>\n            Новый заказ\n          </div>\n          {/* <CheckboxList\n            list={tradetypes}\n            checkedList={tradeTypes}\n            cols={2}\n            headerText=\"Тип торговли*\"\n            headerStyle=\"text-sm\"\n            listStyle=\"ml-0\"\n            onChange={changeTradeTypes}\n          /> */}\n          <SelectRegion\n            region={region}\n            selectRegion={selectRegion}\n            selectDistrict={selectDistrict}\n            district={district}\n            districts={districts}\n            regions={regions}\n            loading={loading}\n            labelRegion={\"Страна\"}\n            labelDistrict={\"Область\"}\n          />\n          <SelectCategory\n            isMulti={true}\n            notShowSub={true}\n            categories={categories}\n            selectCategory={selectCategory}\n            categoriesWithSubcategories={categoriesWithSubcategories}\n            loading={loading}\n            labelCategory={\"Категория*\"}\n            openSubcategories={() => setIsVisibleFilter(!isVisibleFilter)}\n            kategoriya='Выбрать...'\n          />\n\n          <Input\n            // onKeyUp={enterHandler}\n            label='Название*'\n            labelStyle='font-normal'\n            placeholder='Название товара или услуги'\n            name='name'\n            onChange={changeHandler}\n            value={name}\n          />\n          <Description\n            // onKeyUp={enterHandler}\n            name='description'\n            value={description}\n            onChange={changeHandler}\n            label='Описание*'\n            labelStyle='font-normal'\n            placeholder='Опишите подробнее'\n          />\n          <div className='grid grid-cols-2'>\n            {/*<CheckboxList*/}\n            {/*  onChange={changeStatus}*/}\n            {/*  list={positions}*/}\n            {/*  headerText=\"Holati*\"*/}\n            {/*  headerStyle=\"text-sm text-[#777]\"*/}\n            {/*  checkedList={statuses}*/}\n            {/*/>*/}\n            <RadioButtonList\n              currency={currency}\n              onChange={changeCurrency}\n              list={currencices}\n              label='Способ оплаты'\n              name={uniqueId(\"valyuta\")}\n            />\n            <MinMaxPrice\n              onChange={changeHandler}\n              minPrice={minPrice}\n              maxPrice={maxPrice}\n              // onKeyUp={enterHandler}\n            />\n          </div>\n          <UploadImages images={images} setImages={setImages} />\n          <div className='text-sm text-red-600 font-amazonbold text-center'>\n            {errors && errors}\n          </div>\n          <div className='flex justify-center'>\n            <SaveButton\n              title='Создать'\n              className='w-[200px] mt-3'\n              onClick={submitHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CreateOrder;\n"],"names":["dispatch","useDispatch","location","useLocation","navigate","useNavigate","orderId","state","tradetypes","useSelector","trade","loading","login","regions","categoriesWithSubcategories","categories","categoriesList","subcategories","subcategoriesList","subcategories2","subcategoriesList2","filter","isVisibleFilter","setIsVisibleFilter","useState","tradeTypes","setTradeTypes","region","setRegion","district","setDistrict","setCategories","name","setName","description","setDescription","statuses","setStatuses","currency","setCurrency","districts","setDistricts","images","setImages","minPrice","setMinPrice","maxPrice","setMaxPrice","errors","setErrors","clearErrors","changeHandler","e","target","value","submitHandler","data","map","el","status","Number","checkRegisterOrder","updateOrder","id","createOrder","then","error","universalToast","clearFilters","useEffect","getOrderById","payload","UniversalModal","message","order","product","label","length","filterCategories","setDatas","clearSubcategories","getAllCategories","getAllregions","className","onClick","setFilterVisible","filterVisible","selectRegion","selectDistrict","labelRegion","labelDistrict","isMulti","notShowSub","selectCategory","labelCategory","openSubcategories","kategoriya","labelStyle","placeholder","onChange","list","currencices","uniqueId","title"],"sourceRoot":""}